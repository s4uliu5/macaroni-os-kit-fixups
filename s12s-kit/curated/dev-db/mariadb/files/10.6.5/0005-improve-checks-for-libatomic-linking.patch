From 608b3178a4914fcbe44636209057a8a4517dbe43 Mon Sep 17 00:00:00 2001
From: alexfanqi <alex.fan.q@gmail.com>
Date: Fri, 17 Dec 2021 21:23:32 +1100
Subject: [PATCH 5/5] improve checks for libatomic linking

This code piece is adapted from
https://github.com/KDE/krita/blob/451e1415fd1b3a0f9c24de2fd4707d1b1e164236/cmake/modules/CheckAtomic.cmake#L23

State: Accepted/Merged by MariaDB Uptream

Fixes: f502ccbcb5dfce29067434885a23db8d1bd5f134
Fixes: https://bugs.gentoo.org/828065
Reviewed-by: Daniel Black
Tested-by: Yixun Lan <dlan@gentoo.org>
Signed-off-by: Yixun Lan <dlan@gentoo.org>
---
 configure.cmake                | 26 ++++++++++++++++++++------
 storage/rocksdb/CMakeLists.txt |  3 ++-
 2 files changed, 22 insertions(+), 7 deletions(-)

diff --git a/configure.cmake b/configure.cmake
index 182855b4..928416d0 100644
--- a/configure.cmake
+++ b/configure.cmake
@@ -862,9 +862,16 @@ MARK_AS_ADVANCED(NO_ALARM)
 CHECK_CXX_SOURCE_COMPILES("
 int main()
 {
-  long long int var= 1;
-  long long int *ptr= &var;
-  return (int)__atomic_load_n(ptr, __ATOMIC_SEQ_CST);
+  char x=1;
+  short y=1;
+  int z=1;
+  long w = 1;
+  long long s = 1;
+  x = __atomic_add_fetch(&x, 1, __ATOMIC_SEQ_CST);
+  y = __atomic_add_fetch(&y, 1, __ATOMIC_SEQ_CST);
+  z = __atomic_add_fetch(&z, 1, __ATOMIC_SEQ_CST);
+  w = __atomic_add_fetch(&w, 1, __ATOMIC_SEQ_CST);
+  return (int)__atomic_load_n(&s, __ATOMIC_SEQ_CST);
 }"
 HAVE_GCC_C11_ATOMICS_WITHOUT_LIBATOMIC)
 IF (HAVE_GCC_C11_ATOMICS_WITHOUT_LIBATOMIC)
@@ -875,9 +882,16 @@ ELSE()
   CHECK_CXX_SOURCE_COMPILES("
   int main()
   {
-    long long int var= 1;
-    long long int *ptr= &var;
-    return (int)__atomic_load_n(ptr, __ATOMIC_SEQ_CST);
+    char x=1;
+    short y=1;
+    int z=1;
+    long w = 1;
+    long long s = 1;
+    x = __atomic_add_fetch(&x, 1, __ATOMIC_SEQ_CST);
+    y = __atomic_add_fetch(&y, 1, __ATOMIC_SEQ_CST);
+    z = __atomic_add_fetch(&z, 1, __ATOMIC_SEQ_CST);
+    w = __atomic_add_fetch(&w, 1, __ATOMIC_SEQ_CST);
+    return (int)__atomic_load_n(&s, __ATOMIC_SEQ_CST);
   }"
   HAVE_GCC_C11_ATOMICS_WITH_LIBATOMIC)
   IF(HAVE_GCC_C11_ATOMICS_WITH_LIBATOMIC)
diff --git a/storage/rocksdb/CMakeLists.txt b/storage/rocksdb/CMakeLists.txt
index 9fd9a5d7..93030f2a 100644
--- a/storage/rocksdb/CMakeLists.txt
+++ b/storage/rocksdb/CMakeLists.txt
@@ -128,7 +128,8 @@ SET(ROCKSDB_SE_SOURCES
 # This is a strong requirement coming from RocksDB. No conditional checks here.
 #ADD_DEFINITIONS(-DROCKSDB_PLATFORM_POSIX -DROCKSDB_LIB_IO_POSIX
 #)
-if(CMAKE_SYSTEM_PROCESSOR STREQUAL "riscv64")
+
+if (HAVE_GCC_C11_ATOMICS_WITH_LIBATOMIC)
   SET(ATOMIC_EXTRA_LIBS -latomic)
 else()
   SET(ATOMIC_EXTRA_LIBS)
-- 
2.35.1

