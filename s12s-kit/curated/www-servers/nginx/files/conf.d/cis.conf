#
# CIS Benchamrk - v1.0.0 
#
# 2.1.3 Ensure modules with gzip functionality are disabled (Scored)
#
#	Description:
#	gzip is used for compression. Compression functionality should be disabled to prevent 
#	certain types of attacks from being performed successfully.
#
#	Rationale:
#	Compression has been linked with the Breach attack and others. While the Breach attack 
#	has been mitigated with modern usages of the HTTP protocol, disabling the use of 
#	compression is considered a defense-in-depth strategy to mitigate other attacks.
#
#	Audit:
#	Run the following command to ensure gzip modules are not installed:
#
# 	nginx -V | grep 'http_gzip_module\|http_gzip_static_module'
#
#	Ensure the output of the command is empty.

gzip off;

#	
#	gzip on;
#	gzip_vary on;
#	gzip_types text/plain text/css application/json application/x-javascript text/xml application/xml application/xml+rss text/javascript application/javascript text/x-js image/x-icon image/bmp;

# 2.1.4 Ensure the autoindex module is disabled (Scored)
#
#	Description:
#	The autoindex module processes requests ending with the slash character. This feature 
#	enables directory listing, which could be useful in attacker reconnaissance, so it should be 
#	disabled.
#
#	Rationale:
#	Automated directory listings may reveal information helpful to an attacker, such as naming 
#	conventions and directory paths. Directory listings may also reveal files that were not 
#	intended to be revealed.
#
#	Audit:
#	To determine if the autoindex module is disabled, search the NGINX configuration files 
#	(nginx.conf and any included configuration files) for autoindex directives:

#	egrep -i '^\s*autoindex\s+' /etc/nginx/nginx.conf
#	egrep -i '^\s*autoindex\s+' /etc/nginx/conf.d/* 

#	Ensure there are no autoindex on directives present.

autoindex off;

# 2.4.3 Ensure keepalive_timeout is 10 seconds or less, but not 0 (Scored)
#
#	Description:
#
#	Persistent connections are leveraged by all modern browsers to facilitate greater web 
#	performance. The keep-alive timeout limits the time a persistent connection may remain 
#	open. Setting the keep-alive timeout allows this timeout to be controlled on the server side.
#	Rationale:
#	Setting a keep-alive timeout on the server side helps mitigate denial of service attacks that 
#	establish too many persistent connections, exhausting server resources.
#
#	Audit:
#
#	To check the current setting for the keepalive_timeout directive, issue the below command. 
#	You should also manually check your nginx configuration for include statements that may 
#	be located outside the /etc/nginx directory. If none of these are present, the value is set at 
#	the default.
#
#	grep -ir keepalive_timeout /etc/nginx
#
#	The output of the command should contain something similar to the following:
#
#	keepalive_timeout 10;

keepalive_timeout 10;

# 2.4.4 Ensure send_timeout is set to 10 seconds or less, but not 0 (Scored)
#
#	Description:
#	The send_timeout directive sets a timeout for transmitting a response to the client between 
#	two successive write operations.
#
#	Rationale:
#
#	Setting the send_timeout directive on the server side helps mitigate slow HTTP denial of 
#	service attacks by ensuring write operations taking up large amounts of time are closed.
#
#	Audit:
#
#	To check the current setting for the send_timeout directive, issue the below command. You 
#	should also manually check your nginx configuration for include statements that may be 
#	located outside the /etc/nginx directory. If none of these are present, the value is set at the 
#	default.
#
#	grep -ir send_timeout /etc/nginx
#
#	The output of the command should be similar to the following:
#
#	send_timeout 10;

send_timeout 10;

# 2.5.1 Ensure server_tokens directive is set to `off` (Scored)
#	Description:
#	The server_tokens directive is responsible for displaying the NGINX version number and 
#	operating system version on error pages and in the ServerHTTP response header field. 
#	This information should not be displayed.
#
#	Rationale:
#
#	Attackers can conduct reconnaissance on a website using these response headers, then 
#	target attacks for specific known vulnerabilities associated with the underlying 
#	technologies. Hiding the version will slow down and deter some potential attackers.
#
#	Audit:
#
#	In the NGINX configuration file nginx.conf, verify the server_tokens directive is set to off. 
#	To do this, check the response headers for the server header by issuing this command:
#
#	curl -I 127.0.0.1 | grep -i server
#
#	The output should not contain the server header providing your server version, such as the 
#
#	below:
#	Server: nginx/1.14.0

server_tokens off;

# 2.5.4 Ensure the NGINX reverse proxy does not enable information disclosure (Scored)
#
#	Description:
#
#	The server and x-powered-by header may specify the underlying technology used by an 
#	application. The NGINX reverse proxy may pass these headers if not explicitly directed to 
#	remove them.
#
#	Rationale:
#
#	Attackers can conduct reconnaissance on a website using these response headers, then 
#	target attacks for specific known vulnerabilities associated with the underlying 
#	technologies. Removing these headers will reduce the likelihood of targeted attacks.
#
#	Audit:
#	Confirm that the headers are denied as part of the location block of the nginx configuration. 
#	You may also have to check included files as part of this configuration.
#	Run this command:
#
#	grep proxy_hide_header /etc/nginx/nginx.conf
#
#	The output should read:
#
#	proxy_hide_header X-Powered-By;
#	
#	Run this command:
#	
#	grep proxy_hide_header
#	
#	The output should read:
#
#	proxy_hide_header Server;

proxy_hide_header X-Powered-By;

# 3.2 Ensure access logging is enabled (Scored)
#
#	Description:
#
#	The access_log directive should be on for every core site. It is enabled by default.
#
#	Rationale:
#	Access logging allows incident responders and auditors to investigate access to a system in 
#	the event of an incident.
#
#	Audit:
#	Run the following to verify access logging is enabled:
#
#	grep -ir access_log /etc/nginx 
#	The output should show an access log configured and not disabled.
#	If the output is similar to the below, the nginx configuration file should be manually 
#	inspected to ensure you are logging access to all core sites and proxies.
#	access_log off;
#
#	Remediation:
#
#	Ensure the access_log directive is configured for every core site your organization requires 
#	logging for.
#	This should look similar to the below configuration snippet. You may use different log file 
#	locations based on your needs.
#
#	access_log /var/log/nginx/host.access.log main;

access_log /var/log/nginx/access.log main;

# 3.3 Ensure error logging is enabled and set to the info logging level (Scored)

#	Description:
#
#	All errors for applications should be logged.
#
#	Rationale:
#
#	Error logging can be useful in identifying an attacker attempting to exploit a system and 
#	recreating an attacker's steps. Error logging also helps with identifying possible issues with 
#	an application.
#
#	Audit:
#
#	Run the following to verify the error logging configuration in /etc/nginx/nginx.conf:
#	grep error_log /etc/nginx/nginx.conf
#	If there is no output, the output is commented out, or the logging level is set to anything 
#	other than info, this recommendation is not implemented.
#
#	Remediation:
#
#	Edit /etc/nginx/nginx.conf so the error_log directive is present and not commented out. 
#	The error_log should be configured to the logging location of your choice. The configuration 
#	should look similar to the below:
#
#	error_log /var/log/nginx/error.log info;

error_log /var/log/nginx/error.log info;

# 3.7 Ensure proxies pass source IP information (Scored)
#
#	Description:
#	The x-forwarded-for and remote address headers help identify and separate the originating 
#	client IP address of the user agent and the proxy IP address. The two types of addresses are 
#	the same, and one should always be present.
#
#	Rationale:
#	Being able to identify the originating client IP address can help auditors or incident 
#	responders identify where the corresponding user came from. This may be useful in the 
#	event of an attack to analyze if the IP address is a good candidate for blocking. It may also 
#	be useful to correlate an attacker's actions.
#
#	Audit:
#
#	Open the nginx configuration file and the associated included files in that configuration. 
#	Check all location blocks for the presence of the proxy_pass directive. The proxy_pass 
#	directive should be followed by one of the below two directives to ensure the client IP 
#	address is passed to the endpoint the proxy is serving traffic to.
#	proxy_set_header X-Real-IP $remote_addr;
#	proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
#
#	Remediation:
#
#	To ensure your proxy or load balancer will forward information about the client and the 
#	proxy to the application, you must set the below headers in your location block. Edit your 
#	location block so it shows the proxy_set_header directives for the client and the proxy as 
#	shown below. These headers are the exact same and there is no need to have both present.
#
#	server {
#	 ...
#	location / {
#		proxy_pass (Insert Application URL here);
#		proxy_set_header X-Real-IP $remote_addr;
#		proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
#		}
#	}

proxy_set_header X-Real-IP $remote_addr;
proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

# 4.1.5 Disable weak ciphers (Scored)
#	Description:
#	The ssl_ciphers directive should be used to configure the available ciphers on your web 
#	server, and the proxy_ssl_ciphers directive should be used to configure the available 
#	ciphers for your proxy. Weak ciphers should be disabled based on your company's policy or 
#	an industry best practice compliance profile.
#	The ssl_prefer_server_ciphers should be used to ensure the user agent respects the server's 
#	preferred cipher order and does not set its own. If you are using a proxy or load balancer, 
#	you should use the proxy_ssl_ciphers directive to ensure your upstream connections are 
#	negotiated using secure ciphers.
#
#	Rationale:
#	
#	The use of strong ciphers is critical to maintaining strong encryption on your web server, 
#	load balancer, or proxy. Weak ciphers may compromise the security of your site or your 
#	users by allowing legacy user agents to connect to your site in a vulnerable way. You may 
#	also meet compliance concerns by ensuring that your upstream connections meet the same 
#	level of security if using a proxy or load balancer. The server should enforce the cipher 
#	preference on the server side to protect users from malicious actors on the client side.
#
#	Audit:
#
#	Use the following procedure to verify the ssl_cipher and proxy_ssl_cipher directives meet 
#	your company's policy.
#	grep -ir ssl_ciphers /etc/nginx/
#	grep -ir proxy_ssl_ciphers /etc/nginx
#	This output will show the server's configured ciphers and cipher preference policy. If you 
#	have multiple server blocks or proxy passes, you should ensure the directive or directives 
#	appear for each.
#	The output should also contain the directive ssl_prefer_server_ciphers, as shown below:
#
#	ssl_prefer_server_ciphers on;
#	In your environment, you may have to check all include files in your nginx configuration or 
#	the nginx configuration itself manually. The server ciphers may be located as part of the 
#	server block, and the proxy ciphers may be located as part of the location block for your 
#	upstream traffic.
#	OpenSSL may also be used to check compatible ciphers following the procedure found at 
#	OWASP:
#	https://www.owasp.org/index.php/Testing_for_SSL-TLS_%28OWASP-CM-001%29
#
#	Remediation:
#	The following procedures may be used to implement industry standard cipher profiles if 
#	you have an existing profile defined. These profiles may be modified to meet the 
#	requirements defined in your company's policy. This procedure assumes that all server 
#	blocks will be in /etc/nginx/nginx.conf and not inside any included files in the 
#
#	configuration.
#	Set the ssl_cipher directive as part of your server block, and set the proxy_ssl_ciphers 
#	directive as part of the location block for your upstream server.
#	This should look similar to the below examples:
#	Server block configuration for client connectivity to web server, proxy, or load 
#	balancer:
#
#	server {
#		ssl_ciphers ALL:!EXP:!NULL:!ADH:!LOW:!SSLv2:!SSLv3:!MD5:!RC4;
#	}
#	Proxy or load balancer configuration for defined upstream negotiation:
#	location / {
#		proxy_pass https://cisecurity.org;
#		proxy_ssl_ciphers ALL:!EXP:!NULL:!ADH:!LOW:!SSLv2:!SSLv3:!MD5:!RC4;
#	}
#
#	The below procedure assumes the default configuration profile. If you do not have 
#	ssl_ciphers or proxy_ssl_ciphers defined, add the directives to your proxy or web server 
#	configuration profile, then run the below commands to configure them to your selected 
#	profile.
#	FIPS 140-2 compliant proxy:
#	sed -i "s/proxy_ssl_ciphers[^;]*;/proxy_ssl_ciphers 
#	ALL:!EXP:!NULL:!ADH:!LOW:!SSLv2:!SSLv3:!MD5:!RC4;/" /etc/nginx/nginx.conf
#	Or if ssl_prefer_server_ciphers is not already enabled:
#	sed -i "s/proxy_ssl_ciphers[^;]*;/proxy_ssl_ciphers 
#	ALL:!EXP:!NULL:!ADH:!LOW:!SSLv2:!SSLv3:!MD5:!RC4;\nssl_prefer_server_ciphers 
#	on;/" /etc/nginx/nginx.conf
#	FIPS 140-2 compliant web server:
#	sed -i "s/ssl_ciphers[^;]*;/ssl_ciphers 
#	ALL:!EXP:!NULL:!ADH:!LOW:!SSLv2:!SSLv3:!MD5:!RC4;/" /etc/nginx/nginx.conf
#	Or if ssl_prefer_server_ciphers is not already enabled:
#	sed -i "s/ssl_ciphers[^;]*;/ssl_ciphers 
#	ALL:!EXP:!NULL:!ADH:!LOW:!SSLv2:!SSLv3:!MD5:!RC4;\nssl_prefer_server_ciphers 
#	on;
#	/" /etc/nginx/nginx.conf
#	No weak ciphers SSLLABS proxy configuration
#	sed -i "s/proxy_ssl_ciphers[^;]*;/proxy_ssl_ciphers 
#	HIGH:!aNULL:!CAMELLIA:!SHA:!RSA;/" /etc/nginx/nginx.conf
#	Or if ssl_prefer_server_ciphers is not already enabled:
#	sed -i "s/proxy_ssl_ciphers[^;]*;/proxy_ssl_ciphers 
#	HIGH:!aNULL:!CAMELLIA:!SHA:!RSA;\nssl_prefer_server_ciphers on;/" 
#	/etc/nginx/nginx.conf
#	No weak ciphers SSLLABS web server configuration:
#	sed -i "s/ssl_ciphers[^;]*;/ssl_ciphers HIGH:!aNULL:!CAMELLIA:!SHA:!RSA;/" 
#	/etc/nginx/nginx.conf
#	Or if ssl_prefer_server_ciphers is not already enabled:
#	sed -i "s/ssl_ciphers[^;]*;/ssl_ciphers 
#	HIGH:!aNULL:!CAMELLIA:!SHA:!RSA;\nssl_prefer_server_ciphers on;/" 
#	/etc/nginx/nginx.conf
#	Mozilla modern profile proxy:
#	sed -i "s/proxy_ssl_ciphers[^;]*;/proxy_ssl_ciphers 'ECDHE-ECDSA-AES256-GCMSHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSACHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCMSHA256:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES128-
#	SHA256:ECDHE-RSA-AES128-SHA256';/" /etc/nginx/nginx.conf
#	Or if ssl_prefer_server_ciphers is not already enabled:
#	sed -i "s/proxy_ssl_ciphers[^;]*;/proxy_ssl_ciphers 'ECDHE-ECDSA-AES256-GCMSHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSACHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-
#	SHA256:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES128-
#	SHA256:ECDHE-RSA-AES128-SHA256';\nssl_prefer_server_ciphers on;/" 
#	/etc/nginx/nginx.conf
#	Mozilla modern profile web server:
#	sed -i "s/ssl_ciphers[^;]*;/ssl_ciphers 'ECDHE-ECDSA-AES256-GCM-SHA384:ECDHERSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-
#	POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHEECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES128-SHA256:ECDHERSA-AES128-SHA256';/" /etc/nginx/nginx.conf
#	Or if ssl_prefer_server_ciphers is not already enabled:
#	sed -i "s/ssl_ciphers[^;]*;/ssl_ciphers 'ECDHE-ECDSA-AES256-GCM-SHA384:ECDHERSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-
#	POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHEECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES128-SHA256:ECDHERSA-AES128-SHA256';\nssl_prefer_server_ciphers on;/" /etc/nginx/nginx.conf
#	For changes to take effect, you must recycle nginx:
#	service nginx restart
#
#	Impact:
#
#	Strong cipher configurations may not allow legacy user agents or user agents with weak 
#	configurations to connect to your site. If your server must also pass to a legacy upstream 
#	server, this may prevent it from being able to negotiate a cipher upstream.
#
#	Default Value:
#	These directives are not specified by default and are set to the default of 
#	HIGH:!aNULL:!MD5.


# 5.2.1 Ensure timeout values for reading the client header and body are set correctly (Scored)
#
#	Description:
#	The client_header_timeout and client_body_timeout directives define the time 
#	the server will wait for the header or body to be sent from the client. 
#	If the client does not send the entire header in this predefined timeframe, 
#	the server will send back a 408 request timeout error.
#
#	Rationale:
#	Setting the client header and body timeouts help your server mitigate possible 
#	denial of service attacks. By timing out a request, 
#	the server is able to free up resources that may be waiting for the body or header.
#
#	Audit:
#
#	To verify the current settings for the client_body_timeout and client_header_timeout directives, 
#	issue the below command. You should also manually check your nginx configuration for include 
#	statements that may be located outside of the /etc/nginx directory. If this is not present, 
#	the value is set at the default. grep -ir timeout /etc/nginx
#	The output should contain the following: 

client_body_timeout 10; 
client_header_timeout 10;

# 5.2.1 Ensure timeout values for reading the client header and body are set correctly (Scored)
#
#	Description:
#
#	The client_header_timeout and client_body_timeout directives define the time the server will wait 
#	for the header or body to be sent from the client. If the client does not send the entire header 
#	in this predefined timeframe, the server will send back a 408 request timeout error.
#
#	Rationale:
#	Setting the client header and body timeouts help your server mitigate 
#	possible denial of service attacks. By timing out a request, 
#	the server is able to free up resources that may be waiting for the body or header.
#
#	Audit:
#	To verify the current settings for the client_body_timeout and client_header_timeout directives, 
#	issue the below command. You should also manually check your nginx configuration 
#	for include statements that may be located outside of the /etc/nginx directory. 
#	If this is not present, the value is set at the default. grep -ir timeout /etc/nginx
#	The output should contain the following:

#	Remediation:
#	Find the HTTP or server block of your nginx configuration and add 
#	the client_header_timeout and client_body_timeout directives set to the configuration. 
#	The below example sets the timeouts to 10 seconds. 

client_body_timeout 10; 
client_header_timeout 10;


# 5.2.2 Ensure the maximum request body size is set correctly (Scored)
#
#	Description:
#	The client_max_body_size directive sets the size of the request body that is allowed to read a client request. 
#	This defines the number of bytes allowed in a request and is equivalent to the Content-Length request header field.
#
#	Rationale:
#
#	Limiting the size of the request body helps prevent unexpectedly long or large client requests 
#	from being passed to an application to perform buffer overflow attacks. 
#	This value should be set low enough to protect the application 
#	but high enough not to interfere with functionality and block legitimate request bodies.
#
#	Audit:
#
#	To verify the current setting for the client_max_body_size directive, issue the below command. 
#	You should also manually check your nginx configuration for include statements 
#	that may be located outside of the /etc/nginx directory. 
#	If this is not present, the value is set at the default. 
#
#	grep -ir client_max_body_size /etc/nginx
#
#	Remediation:
#	Find the HTTP or server block of your nginx configuration and add the 
#	client_max_body_size set to 100K in this block. 
#	The appropriate value may be different based on your application's needs. 

client_max_body_size 100K

# 5.2.3 Ensure the maximum buffer size for URIs is defined (Scored)
#
#	Description:
#
#	The large_client_header_buffers directive defines 
#	the number and size of buffers used within the URI. 
#	A request cannot exceed the size of this buffer when this directive is configured. 
#	The large_client_header_buffers directive should be set to restrict buffer usage. 
#	The number of buffers should generally set to two and the length be set to 1K; however, 
#	this may not be a good fit for your application and may need to be set differently.
#
#	Rationale:
#
#	The large_client_header_buffers directive may assist in preventing buffer 
#	overflow attacks that leverage long URI query parameters.
#
#	Audit:
#
#	Run this command to verify that the large_client_header_buffers directive is configured properly: grep -ir large_client_header_buffers /etc/nginx/
#	The output should be similar to the below: 

large_client_header_buffers 2 1k

#	Remediation:
#	Open your nginx.conf file and locate your server or HTTP blocks. 
#	This may be added to the HTTP block for all configurations or the server block 
#	for more specific configurations to meet your needs. 
#	Add the below line to implement this recommendation: large_client_header_buffers 2 1k

# 5.3.1 Ensure X-Frame-Options header is configured and enabled (Scored)
#
#       Description:
#
#	The X-Frame-Options header should be set to allow specific websites or no sites 
#	at all to embed your website as an object within their own, 
#	depending on your organizational policy and application needs.
#
#	Rationale:
#
#	The X-Frame-Options header allows you to mitigate the risk of clickjacking attacks.
#
#	Audit:
#
#	Run the following to verify this header is implemented on your site: 
#
#	grep -ir X-Frame-Options /etc/nginx
#
#	The output should look similar to the below, but customized to your use case. 
#	If there is no output from this command, this recommendation is not implemented. 

add_header X-Frame-Options "SAMEORIGIN";

#
#	Remediation:
#
#	Add the below to your server blocks in your nginx configuration. 
#	The policy should be configured to meet your organization's needs. 
#	add_header X-Frame-Options "SAMEORIGIN";

# 5.3.2 Ensure X-Content-Type-Options header is configured and enabled (Scored)
#
#	Description:
#
#	The X-Content-Type-Options header should be used to force supported user agents 
#	to check an HTTP response's content type header with what is expected 
#	from the destination of the request.
#
#	Rationale:
#	Implementing the X-Content-Type-Options header with the "nosniff" directive 
#	helps to prevent drive-by download attacks where 
#	a user agent is sniffing content types in responses.
#
#	Audit:
#
#	Run this command to verify the X-Content-Type-Options Header 
#	is enabled and set to not allow content 
#	type sniffing: grep -ir X-Content-Type-Options /etc/nginx
#	The below should be part of the output. 
#	If it is not, this recommendation is not implemented. 
#	This should be implemented on every server block. 
#	If there are multiple server blocks on the system, 
#	each should be checked. add_header X-Content-Type-Options "nosniff";
#
#	Remediation:
#	Open the nginx configuration file that contains your server blocks. 
#	Add the below line into your server block to add X-Content-Type-Options header 
#	and direct your user agent to not sniff content types. 

add_header X-Content-Type-Options "nosniff";

# 5.3.3 Ensure the X-XSS-Protection Header is enabled and configured properly (Scored)
#	Description:
#	The X-Xss-Protection Header allows you to leverage browser-based protections against cross-site scripting. 
#	This should be implemented on your web servers to protect your users and increase user trust in your site. 
#	Your policy should be set in blocking mode when possible 
#	to ensure the browser blocks a page if cross-site scripting is detected.
#
#	Rationale:
#
#	X-Xss-Protection allows you to protect users whose browsers do not support Content Security Policy 
#	(generally older browsers), or protect users if you do not have a Content Security Policy.
#	Audit:
#	Verify the header is enabled and configured by issuing the following command: 
#
#	grep -ir X-Xss-Protection /etc/nginx
#
#	The output should include the below at a minimum: 
#
#	add_header X-Xss-Protection "1; mode=block";
#
#	Optionally you may configure your policy to report to a reporting URI when violations of this policy occur. 
#	You can do this by leveraging the report directive.
#
#	Remediation:
#
#	Open your nginx configuration file that contains your server blocks. 
#	Add the below line into your server block to add Content-Security-Policy and direct your 
#	user agent to block reflected cross-site scripting. 

add_header X-Xss-Protection "1; mode=block";
