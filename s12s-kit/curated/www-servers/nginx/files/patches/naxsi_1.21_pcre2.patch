From 5046ff477cf4216950ad6bb5a84869700578534b Mon Sep 17 00:00:00 2001
From: laluigino <99279306+laluigino@users.noreply.github.com>
Date: Fri, 11 Feb 2022 13:21:22 +0100
Subject: [PATCH 1/2] Fix: use pcre2 when building with nginx >= 1.21.5

I've tried to compile naxsi 1.3 as module for nginx 1.21.6, and got the error:

error: invalid use of incomplete typedef 'ngx_regex_t' {aka 'struct pcre2_real_code_8'}
  205 |       (tmp_idx < len && (match = pcre_exec(rl->br->rx->regex->code,

I found this issue report: Ref: https://github.com/nbs-system/naxsi/issues/580
then i tried to solve the pcre2 compatibility issue.

I've included an helper function that is 'copied' from: https://github.com/nginx/nginx/blob/master/src/core/ngx_regex.c#L393
that it is called in place of 'pcre_exec' when nginx_version >= 1021005

Not sure if this is the best solution, but I managed to build naxsi 1.3 as module for nginx 1.21.6 succesfully, and it seems to work well.

I'm not used to develop in C anymore (since 25 years ago, at least!), but I hope that this patch I made can help anybody else.
---
 naxsi_src/naxsi_runtime.c | 80 ++++++++++++++++++++++++++++++++++++++-
 1 file changed, 78 insertions(+), 2 deletions(-)

diff --git a/naxsi_src/naxsi_runtime.c b/naxsi_src/naxsi_runtime.c
index b63da5b..f7961be 100644
--- a/naxsi_src/naxsi_runtime.c
+++ b/naxsi_src/naxsi_runtime.c
@@ -181,6 +181,73 @@ ngx_http_naxsi_rawbody_parse(ngx_http_request_ctx_t* ctx,
 unsigned char*
 ngx_utf8_check(ngx_str_t* str);
 
+/*
+ * variables to use pcre2
+ */
+static pcre2_match_data       *ngx_pcre2_match_data;
+static ngx_uint_t              ngx_pcre2_match_data_size;
+
+/*
+ * helper function to use pcre2
+ */
+ngx_int_t
+ngx_pcre2_exec(ngx_regex_t *re, unsigned char* str, unsigned int len, ngx_int_t tmp_idx, int *captures, ngx_uint_t size)
+{
+    size_t      *ov;
+    ngx_int_t    rc;
+    ngx_uint_t   n, i;
+
+    /*
+     * The pcre2_match() function might allocate memory for backtracking
+     * frames, typical allocations are from 40k and above.  So the allocator
+     * is configured to do direct allocations from heap during matching.
+     */
+
+    if (ngx_pcre2_match_data == NULL
+        || size > ngx_pcre2_match_data_size)
+    {
+        /*
+         * Allocate a match data if not yet allocated or smaller than
+         * needed.
+         */
+
+        if (ngx_pcre2_match_data) {
+            pcre2_match_data_free(ngx_pcre2_match_data);
+        }
+
+        ngx_pcre2_match_data_size = size;
+        ngx_pcre2_match_data = pcre2_match_data_create(size / 3, NULL);
+
+        if (ngx_pcre2_match_data == NULL) {
+            rc = PCRE2_ERROR_NOMEMORY;
+            goto failed;
+        }
+    }
+
+    rc = pcre2_match(re, str, len, tmp_idx, 0, ngx_pcre2_match_data, NULL);
+
+    if (rc < 0) {
+        goto failed;
+    }
+
+    n = pcre2_get_ovector_count(ngx_pcre2_match_data);
+    ov = pcre2_get_ovector_pointer(ngx_pcre2_match_data);
+
+    if (n > size / 3) {
+        n = size / 3;
+    }
+
+    for (i = 0; i < n; i++) {
+        captures[i * 2] = ov[i * 2];
+        captures[i * 2 + 1] = ov[i * 2 + 1];
+    }
+
+failed:
+
+    return rc;
+
+}
+
 /*
 ** in : string to inspect, associated rule
 ** does : apply the rule on the string, return 1 if matched,
@@ -201,7 +268,14 @@ ngx_http_process_basic_rule_buffer(ngx_str_t* str, ngx_http_rule_t* rl, ngx_int_
     tmp_idx = 0;
     len     = str->len;
     while
-#if defined   nginx_version && (nginx_version >= 1002002 && nginx_version != 1003000)
+#if defined nginx_version && (nginx_version >= 1021005)
+      (tmp_idx < len && (match = ngx_pcre2_exec(rl->br->rx->regex,                         
+                                           str->data,
+                                           str->len,
+                                           tmp_idx,
+                                           captures,
+                                           30)) >= 0)
+#elif defined nginx_version && (nginx_version >= 1002002 && nginx_version != 1003000)
       (tmp_idx < len && (match = pcre_exec(rl->br->rx->regex->code,
                                            0,
                                            (const char*)str->data,
@@ -496,7 +570,9 @@ ngx_http_naxsi_pcre_wrapper(ngx_regex_compile_t* rx, unsigned char* str, unsigne
   int match;
   int captures[30];
 
-#if defined   nginx_version && (nginx_version >= 1002002 && nginx_version != 1003000)
+#if defined nginx_version && (nginx_version >= 1021005)
+  match = ngx_pcre2_exec(rx->regex, str, len, 0, captures, 1);
+#elif defined nginx_version && (nginx_version >= 1002002 && nginx_version != 1003000)
   match = pcre_exec(rx->regex->code, 0, (const char*)str, len, 0, 0, captures, 1);
 #elif defined nginx_version && (nginx_version > 1001011)
   match = pcre_exec(rx->regex->pcre, 0, (const char*)str, len, 0, 0, captures, 1);

From 61466698c4afb6d52cd0c8bee3309ac5e5ee53ab Mon Sep 17 00:00:00 2001
From: laluigino <99279306+laluigino@users.noreply.github.com>
Date: Fri, 11 Feb 2022 18:30:30 +0100
Subject: [PATCH 2/2] Added a check for nginx_version >= 1021005

Added a check for nginx_version >= 1021005 to avoid helper function definition on older versions
---
 naxsi_src/naxsi_runtime.c | 2 ++
 1 file changed, 2 insertions(+)

diff --git a/naxsi_src/naxsi_runtime.c b/naxsi_src/naxsi_runtime.c
index f7961be..c295637 100644
--- a/naxsi_src/naxsi_runtime.c
+++ b/naxsi_src/naxsi_runtime.c
@@ -181,6 +181,7 @@ ngx_http_naxsi_rawbody_parse(ngx_http_request_ctx_t* ctx,
 unsigned char*
 ngx_utf8_check(ngx_str_t* str);
 
+#if defined nginx_version && (nginx_version >= 1021005)
 /*
  * variables to use pcre2
  */
@@ -247,6 +248,7 @@ ngx_pcre2_exec(ngx_regex_t *re, unsigned char* str, unsigned int len, ngx_int_t
     return rc;
 
 }
+#endif
 
 /*
 ** in : string to inspect, associated rule
