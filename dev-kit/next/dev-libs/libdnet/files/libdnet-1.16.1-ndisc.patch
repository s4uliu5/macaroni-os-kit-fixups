diff -urN libdnet-libdnet-1.16.1/configure libdnet-libdnet-1.16.1.new/configure
--- libdnet-libdnet-1.16.1/configure	2022-05-02 02:35:01.000000000 -0700
+++ libdnet-libdnet-1.16.1.new/configure	2022-05-02 20:56:08.216273254 -0700
@@ -14710,6 +14710,26 @@
 
 fi
 
+if test "$ac_cv_dnet_linux_procfs" = yes ; then
+	case $LIBOBJS in
+    "ndisc-linux.$ac_objext"   | \
+  *" ndisc-linux.$ac_objext"   | \
+    "ndisc-linux.$ac_objext "* | \
+  *" ndisc-linux.$ac_objext "* ) ;;
+  *) LIBOBJS="$LIBOBJS ndisc-linux.$ac_objext" ;;
+esac
+
+else
+	case $LIBOBJS in
+    "ndisc-none.$ac_objext"   | \
+  *" ndisc-none.$ac_objext"   | \
+    "ndisc-none.$ac_objext "* | \
+  *" ndisc-none.$ac_objext "* ) ;;
+  *) LIBOBJS="$LIBOBJS ndisc-none.$ac_objext" ;;
+esac
+
+fi
+
 if test "$ac_cv_header_linux_if_tun_h" = yes ; then
 	case " $LIBOBJS " in
   *" tun-linux.$ac_objext "* ) ;;
diff -urN libdnet-libdnet-1.16.1/configure.ac libdnet-libdnet-1.16.1.new/configure.ac
--- libdnet-libdnet-1.16.1/configure.ac	2022-05-02 02:35:01.000000000 -0700
+++ libdnet-libdnet-1.16.1.new/configure.ac	2022-05-02 20:56:08.216273254 -0700
@@ -311,6 +311,13 @@
     AC_LIBOBJ([ndisc-none])
 fi
 
+dnl Check for ndisc interface.
+if test "$ac_cv_dnet_linux_procfs" = yes ; then
+    AC_LIBOBJ([ndisc-linux])
+else
+    AC_LIBOBJ([ndisc-none])
+fi
+
 dnl Check for tun interface.
 if test "$ac_cv_header_linux_if_tun_h" = yes ; then
 	AC_LIBOBJ([tun-linux])
diff -urN libdnet-libdnet-1.16.1/include/dnet/ip6.h libdnet-libdnet-1.16.1.new/include/dnet/ip6.h
--- libdnet-libdnet-1.16.1/include/dnet/ip6.h	2022-05-02 02:35:01.000000000 -0700
+++ libdnet-libdnet-1.16.1.new/include/dnet/ip6.h	2022-05-02 20:56:08.216273254 -0700
@@ -182,6 +182,9 @@
 ssize_t	 ip6_add_option(void *buf, size_t len,
            int proto, const void *optbuf, size_t optlen);
 
+ssize_t	 ip6_add_option(void *buf, size_t len,
+           int proto, const void *optbuf, size_t optlen);
+
 void	 ip6_checksum(void *buf, size_t len);
 __END_DECLS
 
diff -urN libdnet-libdnet-1.16.1/include/dnet/ndisc.h libdnet-libdnet-1.16.1.new/include/dnet/ndisc.h
--- libdnet-libdnet-1.16.1/include/dnet/ndisc.h	2022-05-02 02:35:01.000000000 -0700
+++ libdnet-libdnet-1.16.1.new/include/dnet/ndisc.h	2022-05-02 20:56:08.216273254 -0700
@@ -33,3 +33,38 @@
 __END_DECLS
 
 #endif /* DNET_NDISC_H */
+/*
+ * ndisc.c
+ *
+ * Kernel arp/ndisc table operations.
+ *
+ * Copyright (c) 2000 Dug Song <dugsong@monkey.org>
+ *
+ */
+
+#ifndef DNET_NDISC_H
+#define DNET_NDISC_H
+
+/*
+ * NDISC cache entry
+ */
+struct ndisc_entry {
+    int    intf_index;
+	struct addr	ndisc_pa;			/* protocol address */
+	struct addr	ndisc_ha;			/* hardware address */
+};
+
+typedef struct ndisc_handle ndisc_t;
+
+typedef int (*ndisc_handler)(const struct ndisc_entry *entry, void *arg);
+
+__BEGIN_DECLS
+ndisc_t	*ndisc_open(void);
+int	 ndisc_add(ndisc_t *n, const struct ndisc_entry *entry);
+int	 ndisc_delete(ndisc_t *n, const struct ndisc_entry *entry);
+int	 ndisc_get(ndisc_t *n, struct ndisc_entry *entry);
+int	 ndisc_loop(ndisc_t *n, ndisc_handler callback, void *arg);
+ndisc_t	*ndisc_close(ndisc_t *r);
+__END_DECLS
+
+#endif /* DNET_NDISC_H */
diff -urN libdnet-libdnet-1.16.1/src/intf.c libdnet-libdnet-1.16.1.new/src/intf.c
--- libdnet-libdnet-1.16.1/src/intf.c	2022-05-02 02:35:01.000000000 -0700
+++ libdnet-libdnet-1.16.1.new/src/intf.c	2022-05-02 20:56:08.216273254 -0700
@@ -97,6 +97,21 @@
 #endif
 };
 
+/* TODO: move to .h */
+union sockunion {
+#ifdef HAVE_NET_IF_DL_H
+       struct sockaddr_dl      sdl;
+#endif
+       struct sockaddr_in      sin;
+#ifdef HAVE_SOCKADDR_IN6
+       struct sockaddr_in6     sin6;
+#endif
+       struct sockaddr         sa;
+#ifdef AF_RAW
+       struct sockaddr_raw     sr;
+#endif
+};
+
 static int
 intf_flags_to_iff(u_short flags, int iff)
 {
diff -urN libdnet-libdnet-1.16.1/src/ip6.c libdnet-libdnet-1.16.1.new/src/ip6.c
--- libdnet-libdnet-1.16.1/src/ip6.c	2022-05-02 02:35:01.000000000 -0700
+++ libdnet-libdnet-1.16.1.new/src/ip6.c	2022-05-02 20:56:08.216273254 -0700
@@ -126,3 +126,57 @@
 
 	return (optlen);
 }
+
+ssize_t
+ip6_add_option(void *buf, size_t len, int proto,
+    const void *optbuf, size_t optlen)
+{
+	struct ip6_hdr *ip6;
+	struct tcp_hdr *tcp = NULL;
+	u_char *p;
+	int hl, datalen, padlen;
+
+	if (proto != IP_PROTO_TCP) {
+		errno = EINVAL;
+		return (-1);
+	}
+
+	ip6 = (struct ip6_hdr *)buf;
+	p = (u_char *)buf + IP6_HDR_LEN;
+
+	tcp = (struct tcp_hdr *)p;
+	hl = tcp->th_off << 2;
+	p = (u_char *)tcp + hl;
+
+	datalen = ntohs(ip6->ip6_plen) + IP6_HDR_LEN - (p - (u_char *)buf);
+
+	/* Compute padding to next word boundary. */
+	if ((padlen = 4 - (optlen % 4)) == 4)
+		padlen = 0;
+
+	/* XXX - IP_HDR_LEN_MAX == TCP_HDR_LEN_MAX */
+	if (hl + optlen + padlen > IP_HDR_LEN_MAX ||
+	    ntohs(ip6->ip6_plen) + IP6_HDR_LEN + optlen + padlen > len) {
+		errno = EINVAL;
+		return (-1);
+	}
+
+	/* Shift any existing data. */
+	if (datalen) {
+		memmove(p + optlen + padlen, p, datalen);
+	}
+	/* XXX - IP_OPT_NOP == TCP_OPT_NOP */
+	if (padlen) {
+		memset(p, IP_OPT_NOP, padlen);
+		p += padlen;
+	}
+	memmove(p, optbuf, optlen);
+	p += optlen;
+	optlen += padlen;
+
+	tcp->th_off = (p - (u_char *)tcp) >> 2;
+
+	ip6->ip6_plen = htons(ntohs(ip6->ip6_plen) + optlen);
+
+	return (optlen);
+}
diff -urN libdnet-libdnet-1.16.1/src/ndisc-linux.c libdnet-libdnet-1.16.1.new/src/ndisc-linux.c
--- libdnet-libdnet-1.16.1/src/ndisc-linux.c	2022-05-02 02:35:01.000000000 -0700
+++ libdnet-libdnet-1.16.1.new/src/ndisc-linux.c	2022-05-02 20:56:08.216273254 -0700
@@ -28,6 +28,203 @@
 
 #include "dnet.h"
 
+struct ndisc_handle 
+{
+	int nlfd;
+	int seq;
+};
+
+ndisc_t *
+ndisc_open(void)
+{
+	struct sockaddr_nl snl;
+	ndisc_t *n;
+
+	if ((n = calloc(1, sizeof(*n))) != NULL) {
+		n->nlfd = -1;
+
+		if ((n->nlfd = socket(AF_NETLINK, SOCK_RAW,
+			 NETLINK_ROUTE)) < 0)
+			return (ndisc_close(n));
+		
+		memset(&snl, 0, sizeof(snl));
+		snl.nl_family = AF_NETLINK;
+		
+		if (bind(n->nlfd, (struct sockaddr *)&snl, sizeof(snl)) < 0)
+			return (ndisc_close(n));
+	}
+	return (n);
+}
+
+static int
+netlink_addattr(struct nlmsghdr *n, int type, const void *data, int data_len)
+{
+	int len = RTA_LENGTH(data_len);
+	struct rtattr *rta;
+
+	rta = (struct rtattr *)((uint8_t*)n + NLMSG_ALIGN(n->nlmsg_len));
+	rta->rta_type = type;
+	rta->rta_len = len;
+	memcpy(RTA_DATA(rta), data, data_len);
+	n->nlmsg_len = NLMSG_ALIGN(n->nlmsg_len) + RTA_ALIGN(len);
+	return 0;
+}
+
+int
+ndisc_modify(ndisc_t *n, const struct ndisc_entry *entry, int type, int flags)
+{
+	struct nlmsghdr *nmsg;
+	struct ndmsg *ndm;
+	struct rtattr *rta;
+	struct sockaddr_nl snl;
+	struct iovec iov;
+	struct msghdr msg;
+	u_char buf[512];
+	int i, af, alen;
+
+	switch (entry->ndisc_pa.addr_type) {
+	case ADDR_TYPE_IP:
+		af = AF_INET;
+		alen = IP_ADDR_LEN;
+		break;
+	case ADDR_TYPE_IP6:
+		af = AF_INET6;
+		alen = IP6_ADDR_LEN;
+		break;
+	default:
+		errno = EINVAL;
+		return (-1);
+	}
+	memset(buf, 0, sizeof(buf));
+
+	nmsg = (struct nlmsghdr *)buf;
+	nmsg->nlmsg_len = NLMSG_LENGTH(sizeof(struct ndmsg));
+	nmsg->nlmsg_flags = NLM_F_REQUEST | flags;
+	nmsg->nlmsg_type = type;
+	nmsg->nlmsg_seq = ++n->seq;
+
+	nmsg->nlmsg_flags |= NLM_F_ACK;
+
+	ndm = (struct ndmsg *)(nmsg + 1);
+	ndm->ndm_family = af;
+	ndm->ndm_state = NUD_PERMANENT; 
+	ndm->ndm_ifindex = entry->intf_index;
+	
+	netlink_addattr(nmsg, NDA_DST, &entry->ndisc_pa.addr_data8[0],
+			alen);
+
+	if (type == RTM_NEWNEIGH) {
+		netlink_addattr(nmsg, NDA_LLADDR, 
+				&entry->ndisc_ha.addr_data8[0], ETH_ADDR_LEN);
+	}
+
+	memset(&snl, 0, sizeof(snl));
+	snl.nl_family = AF_NETLINK;
+
+	iov.iov_base = nmsg;
+	iov.iov_len = nmsg->nlmsg_len;
+	
+	memset(&msg, 0, sizeof(msg));
+	msg.msg_name = &snl;
+	msg.msg_namelen = sizeof(snl);
+	msg.msg_iov = &iov;
+	msg.msg_iovlen = 1;
+	
+	if (sendmsg(n->nlfd, &msg, 0) < 0)
+		return (-1);
+
+	iov.iov_base = buf;
+	iov.iov_len = sizeof(buf);
+	
+	if ((i = recvmsg(n->nlfd, &msg, 0)) <= 0)
+		return (-1);
+
+	if (nmsg->nlmsg_len < (int)sizeof(*nmsg) || nmsg->nlmsg_len > i ||
+	    nmsg->nlmsg_seq != n->seq) {
+		errno = EINVAL;
+		return (-1);
+	}
+	if (nmsg->nlmsg_type == NLMSG_ERROR) {
+		struct nlmsgerr *err = (struct nlmsgerr*)NLMSG_DATA(nmsg);
+		errno = -err->error;
+		if (errno == 0) {
+			return 0;
+		}
+
+		return (-1);
+	}
+
+	return (-1);
+}
+
+int
+ndisc_add(ndisc_t *n, const struct ndisc_entry *entry)
+{
+	return ndisc_modify(n, entry, RTM_NEWNEIGH, NLM_F_CREATE | NLM_F_EXCL);
+}
+
+int
+ndisc_delete(ndisc_t *n, const struct ndisc_entry *entry)
+{
+	return ndisc_modify(n, entry, RTM_DELNEIGH, 0);
+}
+
+int
+ndisc_get(ndisc_t *n, struct ndisc_entry *entry)
+{
+	/* TBD */
+	errno = ENOSYS;
+	return (-1);
+}
+
+int
+nsidc_loop(ndisc_t *n, ndisc_handler callback, void *arg)
+{
+	/* TBD */
+	errno = ENOSYS;
+	return (-1);
+}
+
+ndisc_t *
+ndisc_close(ndisc_t *n)
+{
+	if (n != NULL) {
+		if (n->nlfd >= 0)
+			close(n->nlfd);
+		free(n);
+	}
+	return (NULL);
+}
+/*
+ * ndisc-linux.c
+ *
+ * Copyright (c) 2000 Dug Song <dugsong@monkey.org>
+ *
+ */
+
+#include "config.h"
+
+#include <sys/types.h>
+#include <sys/ioctl.h>
+#include <sys/socket.h>
+#include <sys/uio.h>
+
+#include <asm/types.h>
+#include <netinet/in.h>
+#include <linux/netlink.h>
+#include <linux/rtnetlink.h>
+
+#include <net/route.h>
+
+#include <ctype.h>
+#include <errno.h>
+#include <stdio.h>
+#include <stdlib.h>
+#include <string.h>
+#include <unistd.h>
+
+#include "dnet.h"
+
 struct ndisc_handle
 {
 	int nlfd;
diff -urN libdnet-libdnet-1.16.1/src/ndisc-none.c libdnet-libdnet-1.16.1.new/src/ndisc-none.c
--- libdnet-libdnet-1.16.1/src/ndisc-none.c	2022-05-02 02:35:01.000000000 -0700
+++ libdnet-libdnet-1.16.1.new/src/ndisc-none.c	2022-05-02 20:56:08.216273254 -0700
@@ -53,3 +53,58 @@
 {
 	return (NULL);
 }
+/*
+ * ndisc-linux.c
+ *
+ * Copyright (c) 2000 Dug Song <dugsong@monkey.org>
+ *
+ */
+
+#include "config.h"
+
+#include <errno.h>
+#include <stdio.h>
+#include <stdlib.h>
+
+#include "dnet.h"
+
+ndisc_t *
+ndisc_open(void)
+{
+	errno = ENOSYS;
+	return (NULL);
+}
+
+int
+ndisc_add(ndisc_t *n, const struct ndisc_entry *entry)
+{
+	errno = ENOSYS;
+	return (-1);
+}
+
+int
+ndisc_delete(ndisc_t *n, const struct ndisc_entry *entry)
+{
+	errno = ENOSYS;
+	return (-1);
+}
+
+int
+ndisc_get(ndisc_t *n, struct ndisc_entry *entry)
+{
+	errno = ENOSYS;
+	return (-1);
+}
+
+int
+nsidc_loop(ndisc_t *n, ndisc_handler callback, void *arg)
+{
+	errno = ENOSYS;
+	return (-1);
+}
+
+ndisc_t *
+ndisc_close(ndisc_t *n)
+{
+	return (NULL);
+}
diff -urN libdnet-libdnet-1.16.1/src/route-linux.c libdnet-libdnet-1.16.1.new/src/route-linux.c
--- libdnet-libdnet-1.16.1/src/route-linux.c	2022-05-02 02:35:01.000000000 -0700
+++ libdnet-libdnet-1.16.1.new/src/route-linux.c	2022-05-02 20:56:08.216273254 -0700
@@ -156,6 +156,67 @@
 }
 
 int
+route_add_dev(route_t *r, const struct route_entry *entry, const char* dev)
+{
+	struct rtentry rt;
+	struct addr dst;
+
+	memset(&rt, 0, sizeof(rt));
+	rt.rt_flags = RTF_UP;
+	rt.rt_dev = (char*)dev;
+
+	if (ADDR_ISHOST(&entry->route_dst)) {
+		rt.rt_flags |= RTF_HOST;
+		memcpy(&dst, &entry->route_dst, sizeof(dst));
+	} else
+		addr_net(&entry->route_dst, &dst);
+
+	if (entry->route_gw.addr_ip != 0) {
+		rt.rt_flags |= RTF_GATEWAY;
+	}
+
+	if (addr_ntos(&dst, &rt.rt_dst) < 0 ||
+	    addr_ntos(&entry->route_gw, &rt.rt_gateway) < 0 ||
+	    addr_btos(entry->route_dst.addr_bits, &rt.rt_genmask) < 0)
+		return (-1);
+
+	int ret = (ioctl(r->fd, SIOCADDRT, &rt));
+	return ret;
+}
+
+int
+route6_add(route_t *r, const struct route_entry *entry, int intf_index)
+{
+	struct in6_rtmsg rt;
+	struct addr dst;
+
+	memset(&rt, 0, sizeof(rt));
+	rt.rtmsg_flags = RTF_UP;
+
+	if (ADDR_ISHOST(&entry->route_dst)) {
+		rt.rtmsg_flags |= RTF_HOST;
+		memcpy(&dst, &entry->route_dst, sizeof(dst));
+	} else {
+		addr_net(&entry->route_dst, &dst);
+	}
+
+	rt.rtmsg_dst_len = entry->route_dst.addr_bits;
+	rt.rtmsg_ifindex = intf_index;
+	rt.rtmsg_metric = 1;
+
+	memcpy(&rt.rtmsg_dst, &dst.addr_ip6, sizeof(rt.rtmsg_dst));
+
+	if (!IN6_IS_ADDR_UNSPECIFIED(&entry->route_gw.addr_ip6)) {
+		rt.rtmsg_flags |= RTF_GATEWAY;
+		memcpy(&rt.rtmsg_gateway, &entry->route_gw.addr_ip6,
+				sizeof(rt.rtmsg_gateway));
+	}
+
+	int ret = (ioctl(r->fd6, SIOCADDRT, &rt));
+	return ret;
+}
+
+int
 route_delete(route_t *r, const struct route_entry *entry)
 {
 	struct rtentry rt;
@@ -178,6 +239,32 @@
 }
 
 int
+route6_delete(route_t *r, const struct route_entry *entry, int intf_index)
+{
+	struct in6_rtmsg rt;
+	struct addr dst;
+
+	memset(&rt, 0, sizeof(rt));
+	rt.rtmsg_flags = RTF_UP;
+
+	if (ADDR_ISHOST(&entry->route_dst)) {
+		rt.rtmsg_flags |= RTF_HOST;
+		memcpy(&dst, &entry->route_dst, sizeof(dst));
+	} else
+		addr_net(&entry->route_dst, &dst);
+
+	rt.rtmsg_dst_len = entry->route_dst.addr_bits;
+	rt.rtmsg_ifindex = intf_index;
+	rt.rtmsg_metric = 1;
+
+	memcpy(&rt.rtmsg_dst, &dst, sizeof(rt.rtmsg_dst));
+	memcpy(&rt.rtmsg_gateway, &entry->route_gw, sizeof(rt.rtmsg_gateway));
+
+	int ret = (ioctl(r->fd6, SIOCDELRT, &rt));
+	return ret;
+}
+
+int
 route6_delete(route_t *r, const struct route_entry *entry, int intf_index)
 {
 	struct in6_rtmsg rt;
